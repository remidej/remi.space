import { getClient } from "@/utils/cms";
import { url } from "@/utils/url";
import type { MetadataRoute } from "next";

export default async function sitemap(): Promise<MetadataRoute.Sitemap> {
  const [articles, pages] = await Promise.all([
    getClient().collection("articles").find({
      fields: ["slug", "updatedAt"],
      sort: ["createdAt:desc"], // used for blog page lastModified
      pagination: {
        page: 1,
        pageSize: 99,
      },
    }),
    getClient().collection("pages").find({
      fields: ["slug", "updatedAt"],
      sort: ["createdAt:desc"],
      pagination: {
        page: 1,
        pageSize: 99,
      },
    }),
  ]);

  return [
    // Article pages
    ...articles.data.map((article) => ({
      url: `${url}/blog/${article.slug}`,
      ...(article.updatedAt && {
        lastModified: new Date(article.updatedAt),
      }),
      priority: 0.8,
    })),
    // Pages from the page collection type
    ...pages.data.map((page) => {
      // Treat homepage separately to prioritize it
      if (page.slug === "_") {
        return {
          url,
          ...(page.updatedAt && {
            lastModified: new Date(page.updatedAt),
          }),
          priority: 1,
          changeFrequency: "daily",
        };
      }

      return {
        url: `${url}/${page.slug.replace("_", "")}`,
        ...(page.updatedAt && {
          lastModified: new Date(page.updatedAt),
        }),
        priority: page.slug === "_" ? 1 : 0.8,
        changeFrequency: "weekly",
      };
    }),
    // Blog page is not generated by the CMS, we need to add it separately
    {
      url: `${url}/blog`,
      lastModified: articles.data[0].updatedAt,
      changeFrequency: "weekly",
      priority: 0.9,
    },
  ];
}
